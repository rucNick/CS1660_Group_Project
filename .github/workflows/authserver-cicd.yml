name: Auth Server CI/CD for Cloud Run

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  PROJECT_ID: qr-attendance-455219
  REGION: us-central1
  SERVICE_NAME: auth-server
  REPOSITORY: qr-attendance
  ARTIFACT_REPO: us-central1-docker.pkg.dev/${{ github.event.repository.owner.name }}-${{ github.event.repository.name }}/auth-server

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Set execute permission for Maven wrapper
      run: chmod +x AuthServer/mvnw
        
    - name: Build with Maven
      run: cd AuthServer && ./mvnw clean package -DskipTests

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_AUTH }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Set execute permission for Maven wrapper
      run: chmod +x AuthServer/mvnw
        
    - name: Build with Maven
      run: cd AuthServer && ./mvnw clean package -DskipTests
      
    - name: Enable required APIs
      run: |
        gcloud services enable cloudbuild.googleapis.com --quiet || true
        gcloud services enable artifactregistry.googleapis.com --quiet || true
        gcloud services enable run.googleapis.com --quiet || true
        gcloud services enable firestore.googleapis.com --quiet || true
        
    - name: Create Artifact Registry repository if it doesn't exist
      run: |
        # Check if repository exists
        if ! gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.REGION }} 2>/dev/null; then
          echo "Creating Artifact Registry repository ${{ env.REPOSITORY }}..."
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for ${{ env.SERVICE_NAME }}"
        else
          echo "Artifact Registry repository ${{ env.REPOSITORY }} already exists."
        fi
        
    - name: Configure Docker to use Google Cloud
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        
    - name: Build and Push Docker Image
      run: |
        cd AuthServer
        # Build the Docker image
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        
        # Push the Docker image to Artifact Registry
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --set-env-vars="SPRING_PROFILES_ACTIVE=production" \
          --set-env-vars="GOOGLE_CLIENT_ID=1043677821736-sd578og9up9kkobht663q1dchucsrhep.apps.googleusercontent.com" \
          --set-env-vars="GOOGLE_CLIENT_SECRET=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"
          
    - name: Show deployment URL
      run: |
        echo "Auth Server URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')"
        echo "Auth Server deployed to Cloud Run"